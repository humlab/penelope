[tool.poetry]
name = "humlab-penelope"
version = "0.7.25"
description = "Utilities that simplify enelpeing in Jupyter Lab"
authors = ["Roger MÃ¤hler <roger.mahler@hotmail.com>"]
packages = [{ include = "penelope" }]
classifiers = [
    'License :: OSI Approved :: Apache Software License',
    'Operating System :: OS Independent',
    'Topic :: Software Development',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/humlab/penelope"
repository = "https://github.com/humlab/penelope"

[tool.poetry.dependencies]
bokeh = "*"
ftfy = "*"
ipycytoscape = "*"
ipydatagrid = "^1.1.8"
ipyfilechooser = "*"
ipywidgets = "*"
jupyter_bokeh = "*"
loguru = "*"
lxml = "*"
memoization = "^0.3.1"
more_itertools = "^8.5.0"
msgpack = "^1.0.2"
nltk = "^3.5"
numpy = "*"
openpyxl = "^3.0.5"
pandas = "<2.0.0"
python = "==3.11.*"
requests = "^2.24.0"
scipy = "*"
toml = "^0.10.2"
tqdm = "^4.62.3"

gensim = {version = "*", optional = true}
spacy = {version = "*", optional = true}
pyarrow = {version = "*", optional = true}
textacy = {version = "*", optional = true}
wordcloud = {version = "*", optional = true}
PyYAML = {version = "*", optional = true}
python-louvain = {version = "*", optional = true}
click = {version = "8.0.4", optional = true}
smart-open = "^5.2.1"
python-dotenv = "^1.0.0"

[tool.poetry.extras]
full = [
  "pyarrow",
  "textacy",
  "spacy",
  "gensim",
  "wordcloud",
  "PyYAML",
  "click",
  "python-louvain",
]

[tool.poetry.group.dev.dependencies]
black = "*"
coverage = "*"
flake8 = "*"
flake8-pytest-style = "*"
isort = "*"
memory-profiler = "*"
mypy = "*"
pep8-naming = "*"
pycodestyle = "*"
pyflakes = "*"
pyinstrument = "*"
pylint = "*"
pyright = "*"
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
recommonmark = "*"
Sphinx = "*"
tomlkit = "*"
urllib3 = "1.26.15"

[tool.poetry_bumpversion.file."penelope/__init__.py"]

[tool.poetry.scripts]
vectorize = "penelope.scripts.dtm.vectorize:main"
vectorize-id = "penelope.scripts.dtm.vectorize_id:main"
tm-predict = "penelope.scripts.tm.predict:click_main"
tm-train-id = "penelope.scripts.tm.train_id:click_main"
tm-train-legacy = "penelope.scripts.tm.train_legacy:click_main"
tm-train = "penelope.scripts.tm.train:click_main"
co-occurrence =  {callable = "penelope.scripts.co_occurrence:main", extras=["full"]}
pos-tag = "penelope.scripts.pos_tag:main"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-rfE",
    # "--no-cov",
    "--durations=0"
    # "-q",
    # "-s",
    #"-n4",
]
log_cli = "False"
testpaths = ["tests"]
norecursedirs = [
    "test_data",
    "output",
    "__pycache__",
    "deprecated",
    "penelope",
    "docs",
    ".git",
    ".github",
    ".vscode",
    "profile-reports",
    "tmp",

]
python_files = "*_test.py"
python_functions = "test_*"
filterwarnings = [
    "ignore::_pytest.warning_types.PytestCollectionWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::RuntimeWarning",
    "ignore::UserWarning",
]
# timeout = 300

[tool.black]
line-length = 120
target-version = ["py311"]
skip-string-normalization = true
skip_magic_trailing_comma = false
skip-magic-trailing-comma = false
# include = '\.pyi?$'
exclude = '''
(
  \.git
  | \.pypy_cache
  | \.pytest_cache
  | \.mypy_cache
  | deprecated
)
'''

[tool.isort]
# https://github.com/timothycrosley/isort/wiki/isort-Settings
profile = "black"
line_length = 120
py_version = "auto"
float_to_top = true
src_paths = ["penelope", "tests"]
extra_standard_library = ["__paths__"]


# [tool.taskipy.tasks]
# pytest = "pytest --junitxml=test-results/junit.xml"
# bandit = "bandit -c .bandit.yml -r penelope/"
# black = "black penelope"
# black_ci = "black -check penelope"
# flake8 = "flake8 penelope/ tests/"
# generate_requirements = "poetry export -f requirements.txt -o requirements.txt"
# pre_safety = "task generate_requirements"
# safety = "safety check  -r requirements.txt"
# isort = "isort -rc penelope"
# isort_ci = "isort -rc -c penelope"
# full = "task pytest && task black && task flake8 && task safety && task bandit && task isort"
# ci = "task pytest && task black_ci && task flake8 && task safety && task bandit && task isort_ci"

[tool.coverage]
# https://github.com/nedbat/coveragepy

[tool.coverage.run]
source = ["penelope"]
branch = true
omit = [
    "**/__init__.py",
    "tests/*",
    "interfaces.py",
    "interface.py",
    "penelope/notebook/*",
    "*_gui.py",
]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]
show_missing = true
sort = "Name"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

#[tool.poetry.build]
#generate-setup-file = true